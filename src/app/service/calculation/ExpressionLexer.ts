// Generated from src/app/service/calculation/Expression.g4 by ANTLR 4.6-SNAPSHOT
// tslint:disable

import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ExpressionLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly DECIMAL = 16;
	public static readonly BINARY = 17;
	public static readonly OCTAL = 18;
	public static readonly HEXADECIMAL = 19;
	public static readonly WS = 20;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "DECIMAL", "BINARY", 
		"OCTAL", "HEXADECIMAL", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'('", "')'", "'~'", "'+'", "'-'", "'**'", "'*'", "'/'", "'%'", 
		"'>>>'", "'>>'", "'<<'", "'&'", "'^'", "'|'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, "DECIMAL", "BINARY", "OCTAL", "HEXADECIMAL", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ExpressionLexer._LITERAL_NAMES, ExpressionLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ExpressionLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ExpressionLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Expression.g4"; }

	// @Override
	public get ruleNames(): string[] { return ExpressionLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ExpressionLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return ExpressionLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x16\x80\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x03\x02\x03\x02\x03\x03" +
		"\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07" +
		"\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03" +
		"\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10" +
		"\x03\x10\x03\x11\x06\x11P\n\x11\r\x11\x0E\x11Q\x03\x11\x03\x11\x07\x11" +
		"V\n\x11\f\x11\x0E\x11Y\v\x11\x05\x11[\n\x11\x03\x11\x03\x11\x06\x11_\n" +
		"\x11\r\x11\x0E\x11`\x05\x11c\n\x11\x03\x12\x03\x12\x03\x12\x06\x12h\n" +
		"\x12\r\x12\x0E\x12i\x03\x13\x03\x13\x03\x13\x06\x13o\n\x13\r\x13\x0E\x13" +
		"p\x03\x14\x03\x14\x03\x14\x06\x14v\n\x14\r\x14\x0E\x14w\x03\x15\x06\x15" +
		"{\n\x15\r\x15\x0E\x15|\x03\x15\x03\x15\x02\x02\x02\x16\x03\x02\x03\x05" +
		"\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13" +
		"\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02" +
		"\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16\x03\x02\n\x03\x022" +
		";\x04\x02DDdd\x03\x0223\x04\x02QQqq\x03\x0229\x04\x02ZZzz\x05\x022;CH" +
		"ch\x05\x02\v\f\x0F\x0F\"\"\x88\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02" +
		"\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02" +
		"\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02" +
		"\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02" +
		"\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02" +
		"\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02" +
		"\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x03+" +
		"\x03\x02\x02\x02\x05-\x03\x02\x02\x02\x07/\x03\x02\x02\x02\t1\x03\x02" +
		"\x02\x02\v3\x03\x02\x02\x02\r5\x03\x02\x02\x02\x0F8\x03\x02\x02\x02\x11" +
		":\x03\x02\x02\x02\x13<\x03\x02\x02\x02\x15>\x03\x02\x02\x02\x17B\x03\x02" +
		"\x02\x02\x19E\x03\x02\x02\x02\x1BH\x03\x02\x02\x02\x1DJ\x03\x02\x02\x02" +
		"\x1FL\x03\x02\x02\x02!b\x03\x02\x02\x02#d\x03\x02\x02\x02%k\x03\x02\x02" +
		"\x02\'r\x03\x02\x02\x02)z\x03\x02\x02\x02+,\x07*\x02\x02,\x04\x03\x02" +
		"\x02\x02-.\x07+\x02\x02.\x06\x03\x02\x02\x02/0\x07\x80\x02\x020\b\x03" +
		"\x02\x02\x0212\x07-\x02\x022\n\x03\x02\x02\x0234\x07/\x02\x024\f\x03\x02" +
		"\x02\x0256\x07,\x02\x0267\x07,\x02\x027\x0E\x03\x02\x02\x0289\x07,\x02" +
		"\x029\x10\x03\x02\x02\x02:;\x071\x02\x02;\x12\x03\x02\x02\x02<=\x07\'" +
		"\x02\x02=\x14\x03\x02\x02\x02>?\x07@\x02\x02?@\x07@\x02\x02@A\x07@\x02" +
		"\x02A\x16\x03\x02\x02\x02BC\x07@\x02\x02CD\x07@\x02\x02D\x18\x03\x02\x02" +
		"\x02EF\x07>\x02\x02FG\x07>\x02\x02G\x1A\x03\x02\x02\x02HI\x07(\x02\x02" +
		"I\x1C\x03\x02\x02\x02JK\x07`\x02\x02K\x1E\x03\x02\x02\x02LM\x07~\x02\x02" +
		"M \x03\x02\x02\x02NP\t\x02\x02\x02ON\x03\x02\x02\x02PQ\x03\x02\x02\x02" +
		"QO\x03\x02\x02\x02QR\x03\x02\x02\x02RZ\x03\x02\x02\x02SW\x070\x02\x02" +
		"TV\t\x02\x02\x02UT\x03\x02\x02\x02VY\x03\x02\x02\x02WU\x03\x02\x02\x02" +
		"WX\x03\x02\x02\x02X[\x03\x02\x02\x02YW\x03\x02\x02\x02ZS\x03\x02\x02\x02" +
		"Z[\x03\x02\x02\x02[c\x03\x02\x02\x02\\^\x070\x02\x02]_\t\x02\x02\x02^" +
		"]\x03\x02\x02\x02_`\x03\x02\x02\x02`^\x03\x02\x02\x02`a\x03\x02\x02\x02" +
		"ac\x03\x02\x02\x02bO\x03\x02\x02\x02b\\\x03\x02\x02\x02c\"\x03\x02\x02" +
		"\x02de\x072\x02\x02eg\t\x03\x02\x02fh\t\x04\x02\x02gf\x03\x02\x02\x02" +
		"hi\x03\x02\x02\x02ig\x03\x02\x02\x02ij\x03\x02\x02\x02j$\x03\x02\x02\x02" +
		"kl\x072\x02\x02ln\t\x05\x02\x02mo\t\x06\x02\x02nm\x03\x02\x02\x02op\x03" +
		"\x02\x02\x02pn\x03\x02\x02\x02pq\x03\x02\x02\x02q&\x03\x02\x02\x02rs\x07" +
		"2\x02\x02su\t\x07\x02\x02tv\t\b\x02\x02ut\x03\x02\x02\x02vw\x03\x02\x02" +
		"\x02wu\x03\x02\x02\x02wx\x03\x02\x02\x02x(\x03\x02\x02\x02y{\t\t\x02\x02" +
		"zy\x03\x02\x02\x02{|\x03\x02\x02\x02|z\x03\x02\x02\x02|}\x03\x02\x02\x02" +
		"}~\x03\x02\x02\x02~\x7F\b\x15\x02\x02\x7F*\x03\x02\x02\x02\f\x02QWZ`b" +
		"ipw|\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ExpressionLexer.__ATN) {
			ExpressionLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ExpressionLexer._serializedATN));
		}

		return ExpressionLexer.__ATN;
	}

}

